public class Solution {
    
    public List<Integer> findSubstring(String s, String[] words) {
        Map<String, Integer> map = new HashMap<String, Integer>();
        int n = s.length(), num = words.length, len = words[0].length();
        List<Integer> list = new LinkedList<Integer>();
        
        for(int i=0;i<num;i++){
            if(map.containsKey(words[i]))
                map.put(words[i],map.get(words[i])+1);
            else
                map.put(words[i],1);
        }

        for(int i=0;i<len;i++){

            int cnt=0;
            Map<String,Integer> curMap = new HashMap<String,Integer>();
            for(int l=i,r=i;r+len<=n;r+=len){
                String w = s.substring(r,r+len);
                if(map.containsKey(w)){
                    if(curMap.containsKey(w)) curMap.put(w,curMap.get(w)+1);
                    else curMap.put(w,1);
                    if(curMap.get(w)<=map.get(w)) cnt++;
                    while(curMap.get(w)>map.get(w)){
                        String tmp=s.substring(l,l+len);
                        l+=len;
                        curMap.put(tmp,curMap.get(tmp)-1);
                        if(curMap.get(tmp)<map.get(tmp)) cnt--;
                    }
                    if(cnt==num){
                        list.add(l);
                        String tmp=s.substring(l,l+len);
                        curMap.put(tmp,curMap.get(tmp)-1);
                        l+=len;
                        cnt--;
                    }
                }
                else{
                    curMap.clear();
                    cnt=0;
                    l=r+len;
                }
            }
        }
        
        return list;
    } 
    
}
