public class Solution {
    public int strongPasswordChecker(String s) {
        int len = s.length();
        if(len == 0) return 6;
        int upper = 0, lower = 0, change = 0, digit = 0;
        int[] repeats = new int[3];
        for(int i = 0, j = 1; i < len; ){
            char c = s.charAt(i);
            if(Character.isDigit(c)) digit = 1;
            else if(Character.isUpperCase(c)) upper = 1;
            else if(Character.isLowerCase(c)) lower = 1;
            while(j < len && s.charAt(j) == c) j++;
            if(j - i > 2) { repeats[(j - i) % 3] += 1;  change += (j - i) / 3;}
            i = j++;
        }
        int uld = 3 - upper - lower - digit;
        if(len < 6) return Math.max(uld, Math.max(6 - len, change));
        else if(len < 21) return Math.max(change, uld);
        else{
            int del = len - 20;
            int rem0 = Math.min(repeats[0], del);
            change -= rem0; del -= rem0;
            int rem1 = Math.min(repeats[1], del / 2);
            change -= rem1; del -= rem1 * 2;
            return len - 20 + Math.max(change - del / 3, uld);
        }
    }
}
