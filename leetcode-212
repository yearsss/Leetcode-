package com.company;

import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

/**
 * Created by xfs on 2017/1/11.
 */
public class Solution {
    public class TreeNode{
        TreeNode[] childs;
        boolean end;

        public TreeNode(){
            this.childs = new TreeNode[26];
            this.end = false;
        }
    }

    private boolean[][] visited;
    public List<String> findWords(char[][] board, String[] words) {
        Set<String> ret = new TreeSet<String>();
        TreeNode root = buildTrie(words);
        StringBuilder sb = new StringBuilder();
        visited = new boolean[board.length][board[0].length];
        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board[0].length; j++){
                if(null != root.childs[board[i][j]-'a']) {
                    sb.append(board[i][j]);
                    visited[i][j] = true;
                    dfs(root.childs[board[i][j] - 'a'], i, j, ret, sb, board);
                    visited[i][j] = false;
                    sb.deleteCharAt(sb.length()-1);
                }
            }
        }

        return new LinkedList<String>(ret);
    }

    public void dfs(TreeNode node, int i, int j, Set<String> list, StringBuilder sb, char[][] board){

        // System.out.println(board[i][j]);
        if(node.end)
            list.add(sb.toString());

        if(i > 0 && !visited[i-1][j] && null != node.childs[board[i-1][j]-'a']) {
            sb.append(board[i-1][j]);
            visited[i-1][j] = true;
            dfs(node.childs[board[i-1][j]-'a'], i - 1, j, list, sb, board);
            visited[i-1][j] = false;
            sb.deleteCharAt(sb.length()-1);
        }

        if(i < board.length - 1 && !visited[i+1][j] && null != node.childs[board[i+1][j]-'a']){
            sb.append(board[i+1][j]);
            visited[i+1][j] = true;
            dfs(node.childs[board[i+1][j]-'a'], i + 1, j, list, sb, board);
            visited[i+1][j] = false;
            sb.deleteCharAt(sb.length()-1);
        }

        if(j < board[0].length - 1 && !visited[i][j+1] && null != node.childs[board[i][j+1]-'a']){
            sb.append(board[i][j+1]);
            visited[i][j+1] = true;
            dfs(node.childs[board[i][j+1]-'a'], i, j+1, list, sb, board);
            visited[i][j+1] = false;
            sb.deleteCharAt(sb.length()-1);
        }

        if(j > 0 && !visited[i][j-1] && null != node.childs[board[i][j-1]-'a']){
            sb.append(board[i][j-1]);
            visited[i][j-1] = true;
            dfs(node.childs[board[i][j-1]-'a'], i, j-1, list, sb, board);
            visited[i][j-1] = false;
            sb.deleteCharAt(sb.length()-1);
        }
    }

    private TreeNode buildTrie(String[] words){
        TreeNode root = new TreeNode();
        for(String word : words){
            insertTrie(root, word);
        }
        return root;
    }

    private void insertTrie(TreeNode node, String word){
        if("".equals(word))
            node.end = true;
        else {
            if (null == node.childs[word.charAt(0) - 'a'])
                node.childs[word.charAt(0)-'a'] = new TreeNode();
            insertTrie(node.childs[word.charAt(0)-'a'], word.substring(1));
        }
    }
}
